@inject NavigationManager Navigation

@code {
    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationStateTask is not null)
        {
            var authenticationState = await AuthenticationStateTask;

            if (authenticationState?.User?.Identity is null || !authenticationState.User.Identity.IsAuthenticated)
            {
                var returnUrl = Navigation.ToBaseRelativePath(Navigation.Uri);

                if (string.IsNullOrWhiteSpace(returnUrl))
                    Navigation.NavigateTo("Identity/Account/Login", true);
                else
                    Navigation.NavigateTo($"Identity/Account/Login?returnUrl={returnUrl}", true);
            }
        }
    }

    //async Task<string> getUserName()
    //{
    //    var user = (await AuthenticationStateTask).User;
    //    return user.Identity.Name;
    //}
    //async Task<string> getUserId()
    //{
    //    var user = (await AuthenticationStateTask).User;
    //    var userid = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
    //    return userid;
    //}

}