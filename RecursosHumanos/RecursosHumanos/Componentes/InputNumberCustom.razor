@*@inherits InputBase<TValue>
@typeparam TValue
@using System.Globalization
@using System.Text.RegularExpressions

<input type="number" @attributes="AdditionalAttributes"
       class="@CssClass"
       value="@stringValue"
       @oninput="OnInput"
       @onchange="this.OnValueChanged" />

@code {
    [Parameter] public string FormatString { get; set; } = string.Empty;

    private string stringValue = "";
    private string _currentValue = "";

    // Sets up the initial value of the input
    protected override void OnInitialized()
    {
        this.stringValue = FormatValueAsString(this.Value);
        base.OnInitialized();
    }

    // The Renderer still thinks the value of the input is what we last set it to, not what the user has just typed
    // So we need to con the Renderer that the value is something else first before we set it properly.
    // The diffing engine then sees the change and updatea the browser
    // we use a task based event handler so we get two render events, one on the first yield and one on completion
    private async Task OnInput(ChangeEventArgs e)
    {
        _currentValue = e.Value.ToString();
        stringValue = "";
        await Task.Yield();
        var val = GetNumbers(_currentValue);
        if (BindConverter.TryConvertTo<TValue>(val, CultureInfo.InvariantCulture, out TValue? value))
            this.stringValue = this.FormatValueAsString(value);
        else
            stringValue = null;
        StateHasChanged();
    }

    // We set the base CurrentValueAsString to let it handle all the EditContext changes and validation process
    private void OnValueChanged(ChangeEventArgs e)
    {
        this.CurrentValueAsString = e.Value.ToString();
    }

    // Necessary override for InputBase
    protected override bool TryParseValueFromString(string? value, out TValue? result, out string? validationErrorMessage)
    {
        if (BindConverter.TryConvertTo<TValue?>(value, System.Globalization.CultureInfo.InvariantCulture, out result))
        {
            validationErrorMessage = null;
            return true;
        }
        else
        {
            validationErrorMessage = "Can't parse value";
            return false;
        }
    }

    // Gets only the numbers in the input string
    // ignores any other chars including our commas
    private static string GetNumbers(string input)
        => new string(input.Where(c => (char.IsDigit(c)) || c.Equals('.')).ToArray());

    protected override string FormatValueAsString(TValue? value)
    {
        string val = string.Empty;

        //use Regex to see if we have a decimal with or without trailing zeros
        // We need to detect these as ToString() will ignore them.
        var reg = new Regex(@"(\.0*)$");
        Match match = null;
        if (_currentValue is not null)
            match = reg.Match(_currentValue);
        var hasDecimal = match?.Success ?? false;
        string decimals = hasDecimal
            ? match.Groups[1].Value
            : string.Empty;

        // Avoiding a cast to IFormattable to avoid boxing.
        switch (value)
        {
            case null:
                return null;

            case int @int:
                return @int.ToString(this.FormatString);

            case long @long:
                return @long.ToString(this.FormatString);

            case short @short:
                return @short.ToString(this.FormatString);

            case float @float:
                val = @float.ToString(this.FormatString);
                break;

            case double @double:
                val = @double.ToString(this.FormatString);
                break;

            case decimal @decimal:
                val = @decimal.ToString(this.FormatString);
                break;

            default:
                throw new InvalidOperationException($"Unsupported type {value.GetType()}");
        }
        return hasDecimal ? $"{val}{decimals}" : val;
    }
}*@

@typeparam T
@inherits InputNumber<T>

<input @attributes="AdditionalAttributes"
       type="number"
       class="@CssClass"
       value="@stringValue"
       @oninput="OnInput"
       @onblur="OnBlur" />

@code {
    private string stringValue=string.Empty;
    private T lastParsedValue;

    protected override void OnParametersSet()
    {
        // Only overwrite the "stringValue" when the Value is different
        if (!Equals(CurrentValue, lastParsedValue))
        {
            lastParsedValue = CurrentValue;
            stringValue = CurrentValueAsString;
        }
    }

    private void OnInput(ChangeEventArgs e)
    {
        // Update the value
        CurrentValueAsString = stringValue = (string)e.Value;
        lastParsedValue = CurrentValue;
    }

    private void OnBlur(FocusEventArgs e)
    {
        // Overwrite the stringValue property with the parsed value.
        // This call Value.ToString(), so the value in the input is well formatted.
        // note: Ensure the string value is valid before updating the content
        if (!EditContext.GetValidationMessages(FieldIdentifier).Any())
        {
            stringValue = CurrentValueAsString;
        }
    }
}